module(
    name = "rules_cuda",
    version = "0.0.0",
    compatibility_level = 1,
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.9")

# Example of how one would instantiate platform specific toolchains
cuda_cross_platform = use_extension("@rules_cuda//cuda:remote_cuda_extension.bzl", "cuda_cross_platform", dev_dependency=True)
cuda_cross_platform.install(
    name = "cuda",
    version = {
        "linux-x86_64": "11.8.0",
        "linux-aarch64": "11.8.0",
    },
)

# @cuda contains cross-platform cuda library targets
# @cuda_toolchain contains cross-platform nvcc toolchain definitions
#use_repo(cuda_cross_platform, "cuda")
use_repo(cuda_cross_platform, "cuda", "cuda_toolchain")

# Register all cross-platform toolchains
register_toolchains("@cuda_toolchain//:all", dev_dependency = True)

# Download cudnn
#cudnn_cross_platform = use_extension("@rules_cuda//cuda:remote_cuda_extension.bzl", "cuda_cross_platform", dev_dependency=True)
#cudnn_cross_platform.install(
#    name = "cudnn",
#    url = {
#        "linux-x86_64": "https://developer.download.nvidia.com/compute/cudnn/redist/redistrib_8.9.7.json",
#        "linux-aarch64": "https://developer.download.nvidia.com/compute/cudnn/redist/redistrib_8.9.7.json",
#    },
#    version = {
#        "linux-x86_64": "8.9.7",
#        "linux-aarch64": "8.9.7",
#    },
#)
#
## @cudnn contains aliases with "selects()" for cross-platform cudnn libraries
## Use bazel query @cudnn//:all to see available libraries
#use_repo(cudnn_cross_platform, "cudnn")
